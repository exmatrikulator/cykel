# Generated by Django 2.2.13 on 2020-08-14 14:18

from django.db import migrations, models
import django.db.models.deletion
from textwrap import dedent


def create_and_assign_vehicle_types(apps, schema_editor):
    Bike = apps.get_model("bikesharing", "Bike")
    VehicleType = apps.get_model("bikesharing", "VehicleType")
    used_bike_types = []
    for bike in Bike.objects.order_by("bike_type").distinct("bike_type"):
        used_bike_types.append(bike.bike_type)
    if len(used_bike_types) == 0:
        used_bike_types = ["BI"]
    if "BI" in used_bike_types:
        vt = VehicleType.objects.create(
            name="Bike", form_factor="BI", propulsion_type="HU"
        )
        vt.save()
        Bike.objects.filter(bike_type="BI").update(bike_type=None, vehicle_type=vt)
    if "CB" in used_bike_types:
        vt = VehicleType.objects.create(
            name="Cargo Bike", form_factor="BI", propulsion_type="HU"
        )
        vt.save()
        Bike.objects.filter(bike_type="CB").update(bike_type=None, vehicle_type=vt)
    if "EB" in used_bike_types:
        vt = VehicleType.objects.create(
            name="Electric Bike", form_factor="BI", propulsion_type="EA"
        )
        vt.save()
        Bike.objects.filter(bike_type="EB").update(bike_type=None, vehicle_type=vt)
    if "ES" in used_bike_types:
        vt = VehicleType.objects.create(
            name="Scooter", form_factor="ES", propulsion_type="EL"
        )
        vt.save()
        Bike.objects.filter(bike_type="ES").update(bike_type=None, vehicle_type=vt)
    if "WH" in used_bike_types:
        vt = VehicleType.objects.create(
            name="Wheelchair", form_factor="OT", propulsion_type="HU"
        )
        vt.save()
        Bike.objects.filter(bike_type="WH").update(bike_type=None, vehicle_type=vt)


def remove_vehicle_types(apps, schema_editor):
    Bike = apps.get_model("bikesharing", "Bike")
    VehicleType = apps.get_model("bikesharing", "VehicleType")
    for vt in VehicleType.objects.all():
        Bike.objects.filter(vehicle_type=vt).update(
            bike_type=vt.form_factor, vehicle_type=None
        )
        vt.delete()


class Migration(migrations.Migration):

    dependencies = [
        ("bikesharing", "0030_auto_20200618_1414"),
    ]

    operations = [
        migrations.CreateModel(
            name="VehicleType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, default=None, max_length=255, null=True
                    ),
                ),
                (
                    "form_factor",
                    models.CharField(
                        choices=[
                            ("BI", "Bike"),
                            ("CB", "Cargo Bike"),
                            ("EB", "E-Bike"),
                            ("ES", "E-Scooter"),
                            ("WH", "Wheelchair"),
                            ("CA", "Car"),
                            ("MO", "Moped"),
                            ("OT", "Other"),
                        ],
                        default="BI",
                        max_length=2,
                    ),
                ),
                (
                    "propulsion_type",
                    models.CharField(
                        choices=[
                            ("HU", "Human"),
                            ("EA", "Electric Assist"),
                            ("EL", "Electric"),
                            ("CO", "Combustion"),
                        ],
                        default="HU",
                        max_length=2,
                    ),
                ),
                (
                    "max_range_meters",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text=dedent(
                            """\
                            If the vehicle has a motor, the furthest distance in meters
                            that the vehicle can travel without recharging or refueling
                            when it has the maximum amount of energy potential
                            (for example a full battery or full tank of gas)."""
                        ),
                        null=True,
                    ),
                ),
                (
                    "internal_note",
                    models.TextField(blank=True, default=None, null=True),
                ),
            ],
        ),
        migrations.AddField(
            model_name="bike",
            name="vehicle_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="bikesharing.VehicleType",
            ),
        ),
        migrations.AlterField(
            model_name="bike",
            name="bike_type",
            field=models.CharField(
                choices=[
                    ("BI", "Bike"),
                    ("CB", "Cargo Bike"),
                    ("EB", "E-Bike"),
                    ("ES", "E-Scooter"),
                    ("WH", "Wheelchair"),
                ],
                default="BI",
                max_length=2,
                null=True,
            ),
        ),
        migrations.RunPython(create_and_assign_vehicle_types, remove_vehicle_types),
    ]
